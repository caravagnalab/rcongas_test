source('~/Dropbox/Tesi_DSSC_cancer_trajectory_inference/Marnix/script_simulation.R')
anim = animate(plot_selection_sweep, width=380, height=220, renderer = gifski_renderer())
anim
source('~/Dropbox/Tesi_DSSC_cancer_trajectory_inference/Marnix/script_simulation.R')
anim = animate(plot_selection_sweep, width=380, height=220, renderer = gifski_renderer())
anim
setwd("~/Bioinfo/Cancer Evolution/annealToolbox")
setwd("~/Bioinfo/Cancer Evolution/annealToolbox")
setwd("~/Bioinfo/Cancer Evolution/rcongas_test")
setwd("~/Bioinfo/Cancer Evolution/rcongas_test")
source('~/Bioinfo/Cancer Evolution/tests/test_3.R', echo=TRUE)
source('~/Bioinfo/Cancer Evolution/rcongas_test/test1/test_1.R', echo=TRUE)
setwd("~/Bioinfo/Cancer Evolution/rcongas_test/test1")
source('~/Bioinfo/Cancer Evolution/rcongas_test/test1/test_1.R', echo=TRUE)
source('~/Bioinfo/Cancer Evolution/rcongas_test/test1/test_1.R', echo=TRUE)
source('~/Bioinfo/Cancer Evolution/rcongas_test/test1/test_1.R', echo=TRUE)
source('~/Bioinfo/Cancer Evolution/rcongas_test/test1/test_1.R', echo=TRUE)
source('~/Bioinfo/Cancer Evolution/rcongas_test/test1/test_1.R', echo=TRUE)
source('~/Bioinfo/Cancer Evolution/rcongas_test/test1/utils_tests.R', echo=TRUE)
source('~/Bioinfo/Cancer Evolution/rcongas_test/test1/test_1.R', echo=TRUE)
Rcongas::run_simulation_generative()
ff <- Rcongas::generate_cluster_ploidy_df()
gg <- ff <- Rcongas::generate_cluster_ploidy_df(ff)
gg <- ff <- Rcongas::generate_cluster_ploidy_df(ff, K = 2)
ff <- Rcongas::generate_cluster_ploidy_df(K = 2)
gg <- ff <- Rcongas::generate_cluster_ploidy_df(ff, K = 2)
ff
ff <- Rcongas::generate_cluster_ploidy_df()
gg <-  Rcongas::run_simulation_generative(ff)
gg
best_cluster(gg)
best_cluster(gg, 1:3)
best_cluster(gg, "MixtureGaussian",1:3)
gg$data$
from_simulation_to_data_list(gg)
from_simulation_to_data_list(gg)
inherits(gg, "CNVSimulation")
gg
source('~/Bioinfo/Cancer Evolution/rcongas_test/test1/test_1.R', echo=TRUE)
source('~/Bioinfo/Cancer Evolution/rcongas_test/test2/test_5.R', echo=TRUE)
source('~/Bioinfo/Cancer Evolution/rcongas_test/test2/test_5.R', echo=TRUE)
source('~/Bioinfo/Cancer Evolution/tests/test_6.R', echo=TRUE)
source('~/Bioinfo/Cancer Evolution/rcongas_test/test2/test_5.R', echo=TRUE)
source('~/Bioinfo/Cancer Evolution/rcongas_test/test2/test_5.R', echo=TRUE)
ls
ls()
x
source('~/Bioinfo/Cancer Evolution/rcongas_test/test2/test_5.R', echo=TRUE)
source('~/Bioinfo/Cancer Evolution/rcongas_test/test2/test_5.R', echo=TRUE)
source('~/Bioinfo/Cancer Evolution/rcongas_test/test2/test_5.R', echo=TRUE)
setwd("~/Dropbox/Tesi_DSSC_cancer_trajectory_inference/Marnix")
source('~/Dropbox/Tesi_DSSC_cancer_trajectory_inference/Marnix/1.3.vaf_deconvolution.R', echo=TRUE)
source('~/Dropbox/Tesi_DSSC_cancer_trajectory_inference/Marnix/1.3.vaf_deconvolution.R', echo=TRUE)
source('~/Dropbox/Tesi_DSSC_cancer_trajectory_inference/Marnix/1.3.vaf_deconvolution.R', echo=TRUE)
Runner("s19_2632", "s111")
Runner = function(SAMPLE,TUMOR)
{
source('0.setup.R')
library(tidyverse)
#library(ICRDataPackageWGS)
# Output folders
OUT_FOLDER = paste0("fits/",  TUMOR, "/", SAMPLE)
OUT_FIT = paste0(OUT_FOLDER, '/', SAMPLE, '_pipeline_qc.RData')
dir.create(OUT_FOLDER)
# Raw data
data_patient = load_patient_data(TUMOR, SAMPLE)
save(data_patient, file = paste0(OUT_FOLDER, '/', SAMPLE, '_raw_data.RData'))
data_patient$mutations = data_patient$mutations %>% filter(nchar(ref) == 1, nchar(alt) == 1, alt != "-", ref != "-")
# CNAqc
x = CNAqc::init(
snvs = data_patient$mutations %>% filter(VAF > 0.02),
cna = data_patient$cnas,
purity = data_patient$purity,
ref = 'hg19')
save(x, file = paste0(OUT_FOLDER, '/', SAMPLE, '_cnaqc_object.RData'))
#############################################################
# CNA DATA QC
# Loose parameters because data is low-coverage...
#############################################################
qc = evoverse::pipeline_qc_copynumbercalls(
mutations = x$snvs,
cna = x$cna %>% select(-n),
purity = x$purity,
smooth = TRUE,
reference = 'hg19',
description = SAMPLE,
ccf_method = "ROUGH",
peak_method = "closest",
matching_epsilon_peaks = 0.025
)
save(qc, file = OUT_FIT)
evoverse:::plot.evopipe_qc(qc) %>%
ggsave(
filename = paste0(OUT_FOLDER, "/", SAMPLE, "_pipeline_qc.pdf"),
width = 14,
height = 16
)
#log_computation(logfile = 'qc', f = OUT_FOLDER, s = SAMPLE, msg = qc$log)
}
Runner("s19_2632", "s111")
Runner = function(SAMPLE,TUMOR)
{
source('0.setup.R')
library(tidyverse)
#library(ICRDataPackageWGS)
# Output folders
OUT_FOLDER = paste0("fits_con_filtro/",  TUMOR, "/", SAMPLE)
OUT_FIT = paste0(OUT_FOLDER, '/', SAMPLE, '_pipeline_qc.RData')
dir.create(OUT_FOLDER)
# Raw data
data_patient = load_patient_data(TUMOR, SAMPLE)
save(data_patient, file = paste0(OUT_FOLDER, '/', SAMPLE, '_raw_data.RData'))
data_patient$mutations = data_patient$mutations %>% filter(nchar(ref) == 1, nchar(alt) == 1, alt != "-", ref != "-")
# CNAqc
x = CNAqc::init(
snvs = data_patient$mutations %>% filter(VAF > 0.02),
cna = data_patient$cnas,
purity = data_patient$purity,
ref = 'hg19')
save(x, file = paste0(OUT_FOLDER, '/', SAMPLE, '_cnaqc_object.RData'))
#############################################################
# CNA DATA QC
# Loose parameters because data is low-coverage...
#############################################################
qc = evoverse::pipeline_qc_copynumbercalls(
mutations = x$snvs,
cna = x$cna %>% select(-n),
purity = x$purity,
smooth = TRUE,
reference = 'hg19',
description = SAMPLE,
ccf_method = "ROUGH",
peak_method = "closest",
matching_epsilon_peaks = 0.025
)
save(qc, file = OUT_FIT)
evoverse:::plot.evopipe_qc(qc) %>%
ggsave(
filename = paste0(OUT_FOLDER, "/", SAMPLE, "_pipeline_qc.pdf"),
width = 14,
height = 16
)
#log_computation(logfile = 'qc', f = OUT_FOLDER, s = SAMPLE, msg = qc$log)
}
setwd("~/Dropbox/Tesi_DSSC_cancer_trajectory_inference/Marnix")
Runner("s19_2632", "s111")
Runner("s111","s19_2632")
Marnix_cohort = load_all_patient_ids()
Marnix_cohort
Marnix_cohort %>%  filter(Tumour_ID == "s19_2632")
source('~/Dropbox/Tesi_DSSC_cancer_trajectory_inference/Marnix/1.1.1.dataqc.R', echo=TRUE)
source('~/Dropbox/Tesi_DSSC_cancer_trajectory_inference/Marnix/1.1.1.dataqc.R', echo=TRUE)
source('~/Dropbox/Tesi_DSSC_cancer_trajectory_inference/Marnix/1.1.1.dataqc.R', echo=TRUE)
source('~/Dropbox/Tesi_DSSC_cancer_trajectory_inference/Marnix/1.3.vaf_deconvolution.R', echo=TRUE)
warnings()
patient = '18_6179'
all_patients = load_all_patient_ids() %>%
group_by(Tumour_ID) %>%
filter(n() > 1) %>%
ungroup()
samples_list = all_patients %>% filter(Tumour_ID == patient) %>% pull(Sample_ID)
data_patient = lapply(samples_list, load_patient_CA, patient = patient)
all_patients = load_all_patient_ids() %>%
group_by(Tumour_ID) %>%
filter(n() > 1) %>%
ungroup()
source('0.setup.R')
data_patient = lapply(samples_list, load_patient_CA, patient = patient)
names(data_patient) = samples_list
mutations = lapply(names(data_patient), function(s)
{
x = data_patient[[s]] %>%
select(-DP, -NV, -Tail, -driver_label, -is_driver,-gene,-segment_id, -karyotype, -bmix_cluster, -matches("C", ignore.case = F)) %>%
filter(mobster_cluster != "Tail") %>% mutate(mobster_cluster = as.numeric(factor(mobster_cluster))) %>% select(-mobster_cluster)
colnames(x)[6] = paste0(s, '.VAF')
x
})
mutations
multi_sample_mutations = Reduce(function(x, y)
full_join(x, y, by = c('chr', 'from', 'to', 'ref', 'alt')), mutations) %>%  replace(is.na(.), 0)
multi_sample_mutations
pairs = combn(samples_list, 2, simplify = T)
pairs
# Counts for shared mutations
shared_mutations_counts = apply(pairs, 2, function(x){
s1 = paste0(x[1], '.VAF')
s2 = paste0(x[2], '.VAF')
shared_mutations = (multi_sample_mutations[[s1]] > 0) & (multi_sample_mutations[[s2]] > 0)
shared_mutations = multi_sample_mutations[shared_mutations, ] %>% nrow
return(data.frame(set = paste0(x[1], ' and ', x[2]), n = shared_mutations, stringsAsFactors = FALSE))
})
shared_mutations_counts
# Counts for private mutations
private_mutations_counts = lapply(samples_list,function(x){
s = paste0(x, '.VAF')
other_than_s = setdiff(samples_list, x)
other_than_s = paste0(other_than_s, '.VAF')
# mutations in s (all)
all_s_mutations = multi_sample_mutations[[s]] > 0
# mutation that are NOT in the other samples
mutations_not_in_other_than_s = apply(
multi_sample_mutations[other_than_s],
1,
function(x) all(x == 0)
)
# Private in s: intersection
private_mutations = multi_sample_mutations[all_s_mutations & mutations_not_in_other_than_s, ] %>% nrow
return(data.frame(set = x, n = private_mutations, stringsAsFactors = FALSE))
})
private_mutations_counts
data_patient
# All combinations private and shared counts
all_combinations_counts = bind_rows(
Reduce(bind_rows, shared_mutations_counts),
Reduce(bind_rows, private_mutations_counts)
) %>%
arrange(desc(n))
barplot_sets_of_mutations = all_combinations_counts %>%
ggplot(
aes(x = factor(set, levels = all_combinations_counts$set), n)
) +
geom_bar(stat = 'identity') +
CNAqc:::my_ggplot_theme() +
labs(x = "Sets of mutations", y = "Mutations counts", title = paste("Mutations counts", patient))
source('~/Dropbox/Tesi_DSSC_cancer_trajectory_inference/Marnix/4.1. Plots counts per sample clonal.R', echo=TRUE)
source('~/Dropbox/Tesi_DSSC_cancer_trajectory_inference/Marnix/4.1. Plots counts per sample clonal.R', echo=TRUE)
source('~/Dropbox/Tesi_DSSC_cancer_trajectory_inference/Marnix/0.setup.R', echo=TRUE)
source('~/Dropbox/Tesi_DSSC_cancer_trajectory_inference/Marnix/4.1. Plots counts per sample clonal.R', echo=TRUE)
all_patients = load_all_patient_ids() %>%
group_by(Tumour_ID) %>%
filter(n() > 1) %>%
ungroup()
patient = '18_6179'
samples_list = all_patients %>% filter(Tumour_ID == patient) %>% pull(Sample_ID)
all_patients
samples_list
data_patient = lapply(samples_list, load_patient_CA, patient = patient)
names(data_patient) = samples_list
mutations = lapply(names(data_patient), function(s)
{
x = data_patient[[s]] %>%
select(-DP, -NV, -Tail, -driver_label, -is_driver,-gene,-segment_id, -karyotype, -bmix_cluster, -matches("C", ignore.case = F)) %>%
filter(mobster_cluster == "C1") %>% select(-mobster_cluster)
colnames(x)[6] = paste0(s, '.VAF')
x
})
mutations
multi_sample_mutations = Reduce(function(x, y)
full_join(x, y, by = c('chr', 'from', 'to', 'ref', 'alt')), mutations) %>%  replace(is.na(.), 0)
pairs = combn(samples_list, 2, simplify = T)
# Counts for shared mutations
shared_mutations_counts = apply(pairs, 2, function(x){
s1 = paste0(x[1], '.VAF')
s2 = paste0(x[2], '.VAF')
shared_mutations = (multi_sample_mutations[[s1]] > 0) & (multi_sample_mutations[[s2]] > 0)
shared_mutations = multi_sample_mutations[shared_mutations, ] %>% nrow
return(data.frame(set = paste0(x[1], ' and ', x[2]), n = shared_mutations, stringsAsFactors = FALSE))
})
# Counts for private mutations
private_mutations_counts = lapply(samples_list,function(x){
s = paste0(x, '.VAF')
other_than_s = setdiff(samples_list, x)
other_than_s = paste0(other_than_s, '.VAF')
# mutations in s (all)
all_s_mutations = multi_sample_mutations[[s]] > 0
# mutation that are NOT in the other samples
mutations_not_in_other_than_s = apply(
multi_sample_mutations[other_than_s],
1,
function(x) all(x == 0)
)
# Private in s: intersection
private_mutations = multi_sample_mutations[all_s_mutations & mutations_not_in_other_than_s, ] %>% nrow
return(data.frame(set = x, n = private_mutations, stringsAsFactors = FALSE))
})
# All combinations private and shared counts
all_combinations_counts = bind_rows(
Reduce(bind_rows, shared_mutations_counts),
Reduce(bind_rows, private_mutations_counts)
) %>%
arrange(desc(n))
mobster_plots <- lapply(samples_list, load_mobster_VAF_diploid, patient_id = patient)
source('~/Dropbox/Tesi_DSSC_cancer_trajectory_inference/Marnix/4.1. Plots counts per sample clonal.R', echo=TRUE)
source('~/Dropbox/Tesi_DSSC_cancer_trajectory_inference/Marnix/4.1. Plots counts per sample clonal.R', echo=TRUE)
warnings()
source('~/Dropbox/Tesi_DSSC_cancer_trajectory_inference/Marnix/0.setup.R', echo=TRUE)
source('~/Dropbox/Tesi_DSSC_cancer_trajectory_inference/Marnix/4.1. Plots counts per sample clonal.R', echo=TRUE)
source('~/Dropbox/Tesi_DSSC_cancer_trajectory_inference/Marnix/4.1. Plots counts per sample clonal.R', echo=TRUE)
all_combinations_counts
Reduce(bind_rows, shared_mutations_counts)
source('~/Dropbox/Tesi_DSSC_cancer_trajectory_inference/Marnix/4.1. Plots counts per sample clonal.R', echo=TRUE)
# All combinations private and shared counts
all_combinations_counts = bind_rows(
Reduce(bind_rows, shared_mutations_counts) %>%  mutate(share = "shared") ,
Reduce(bind_rows, private_mutations_counts)  %>%  mutate(share = "private")
) %>%
arrange(desc(n))
all_combinations_counts
install.packages("Lahman")
source('~/Bioinfo/Cancer Evolution/rcongas_test/test2/test_5.R', echo=TRUE)
source('~/Dropbox/Tesi_DSSC_cancer_trajectory_inference/Marnix/4.1. Plots counts per sample clonal.R', echo=TRUE)
source('~/Dropbox/Tesi_DSSC_cancer_trajectory_inference/Marnix/4.1. Plots counts per sample clonal.R', echo=TRUE)
source('~/Dropbox/Tesi_DSSC_cancer_trajectory_inference/Marnix/4.1. Plots counts per sample clonal.R', echo=TRUE)
setwd("~/Bioinfo/Cancer Evolution/rcongas_test/test2")
source('~/Bioinfo/Cancer Evolution/rcongas_test/test2/test_5.R', echo=TRUE)
source('~/Bioinfo/Cancer Evolution/rcongas_test/test2/test_5.R', echo=TRUE)
source('~/Bioinfo/Cancer Evolution/rcongas_test/test2/test_5.R', echo=TRUE)
source('~/Bioinfo/Cancer Evolution/rcongas_test/test2/test_5.R', echo=TRUE)
res
source('~/Bioinfo/Cancer Evolution/rcongas_test/test2/test_5.R', echo=TRUE)
source('~/Bioinfo/Cancer Evolution/rcongas_test/test1/test_1.R', echo=TRUE)
setwd("~/Bioinfo/Cancer Evolution/rcongas_test/test1")
source('~/Bioinfo/Cancer Evolution/rcongas_test/test1/test_1.R', echo=TRUE)
source('~/Bioinfo/Cancer Evolution/rcongas_test/test1/test_1.R', echo=TRUE)
cnv_df <-  generate_cluster_ploidy_df()
simul <- run_simulation_generative(cnv_df)
mixture <-  list(torch$tensor(c(1)), torch$tensor(c(0.7,0.3)), torch$tensor(c(0.4,0.3,0.3)), torch$tensor(c(0.3,0.3,0.2,0.2)) )
simul$data$cnv$ploidy_real <-  round(simul$data$cnv$ploidy_real)
res <- best_cluster(simul, "MixtureGaussian", 1:4,param_list = list("theta_scale" = 32, "theta_rate" = 32, "cnv_var" = 0.65),steps = steps, lr = 0.1, mixture = mixture, method = IC, posteriors = posteriors, MAP = T)
IC = "BIC"
nsegs = NULL
posteriors = FALSE
steps = 300L
res <- best_cluster(simul, "MixtureGaussian", 1:4,param_list = list("theta_scale" = 32, "theta_rate" = 32, "cnv_var" = 0.65),steps = steps, lr = 0.1, mixture = mixture, method = IC, posteriors = posteriors, MAP = T)
res <- best_cluster(simul, "MixtureGaussian", 2:4,param_list = list("theta_scale" = 32, "theta_rate" = 32, "cnv_var" = 0.65),steps = steps, lr = 0.1, mixture = mixture, method = IC, posteriors = posteriors, MAP = T)
res <- best_cluster(simul, "MixtureGaussianOld", 2:4,param_list = list("theta_scale" = 32, "theta_rate" = 32, "cnv_var" = 0.65),steps = steps, lr = 0.1, mixture = mixture, method = IC, posteriors = posteriors, MAP = T)
res <- best_cluster(simul, "MixtureGaussianOld", 2:4,param_list = list("theta_scale" = 32, "theta_rate" = 32, "cnv_var" = 0.65),steps = steps, lr = 0.1, mixture = mixture, method = IC, posteriors = posteriors, MAP = T)
reticulate::py_install("congas", pip = T)
reticulate::py_install("congas", pip = T)
X <- simul
data_list <- from_simulation_to_data_list(X)
data_list
model_name <- model
optim_name <- optim
elbo_name <-  elbo
optim = "ClippedAdam"
elbo = "TraceEnum_ELBO"
inf_type = "SVI"
lr = 0.05
param_list = list()
seed = 3
model_name <- model
model = "MixtureGaussian"
model_name <- model
optim_name <- optim
elbo_name <-  elbo
inf_type_name <- inf_type
cell_names <- colnames(data_list$data)
seg_names <- rownames(data_list$data)
data_list <- tensorize(data_list)
seed <- as.integer(seed)
steps <-  as.integer(steps)
model <-  choose_model(model)
optim <-  choose_optim(optim)
elbo <-  choose_loss(elbo)
inf_type <- choose_type(inf_type)
lr <- as.double(lr)
int <- an$Interface(model,optim,elbo,inf_type)
an <- reticulate::import("congas")
int <- an$Interface(model,optim,elbo,inf_type)
int$initialize_model(data_list)
int$set_model_params(param_list)
loss <- int$run(steps=steps, seed = seed, param_optimizer=list('lr'= lr),  MAP = MAP)
MAP = T
loss <- int$run(steps=steps, seed = seed, param_optimizer=list('lr'= lr),  MAP = MAP)
int
int
loss <- int$run(steps=steps, seed = seed, param_optimizer=list('lr'= lr),  MAP = MAP)
source('~/Bioinfo/Cancer Evolution/rcongas_test/test1/test_1.R', echo=TRUE)
source('~/Bioinfo/Cancer Evolution/rcongas_test/test1/test_1.R', echo=TRUE)
source('~/Bioinfo/Cancer Evolution/rcongas_test/test2/test_5.R', echo=TRUE)
X$data$counts
sum(X$data$counts == 0)
sum(X$data$cnv$ploidy_real == 0)
sum(X$data$cnv$mu == 0)
breast_xeno_10x_small_segments_no_norm$data$cnv$mu
breast_xeno_10x_small_segments_no_norm$data$cnv$fixed_mu
data_list
tensorize(breast_xeno_10x_small_segments_no_norm)
tensorize(breast_xeno_10x_small_segments_no_norm)
tensorize(breast_xeno_10x_small_segments_no_norm$data)
from_simulation_to_data_list(breast_xeno_10x_small_segments_no_norm)
source('~/Bioinfo/Cancer Evolution/rcongas_test/test1/test_1.R', echo=TRUE)
source('~/Bioinfo/Cancer Evolution/rcongas_test/test1/test_1.R', echo=TRUE)
source('~/Bioinfo/Cancer Evolution/rcongas_test/test1/test_1.R', echo=TRUE)
gc()
source('~/Bioinfo/Cancer Evolution/rcongas_test/test1/test_1.R', echo=TRUE)
