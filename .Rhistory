any(is.na(x))
ng = nrow(x)
nc = ncol(x)
ng
nc
require(pheatmap)
show_rownames = show_colnames = FALSE
cluster_cols = TRUE
if (ng < 100)
show_rownames = TRUE
if (nc < 100)
show_colnames = TRUE
if (!all(is.null(clusters)))
cluster_cols = FALSE
if (!show_rownames)
cli::cli_alert_info("With more than 100 genes, gene names are hidden.")
clusters = Rcongas::get_clusters(fit_nt)
clusters
clusters$cluster
if (!all(is.null(clusters)))
cluster_cols = FALSE
if (!show_rownames)
cli::cli_alert_info("With more than 100 genes, gene names are hidden.")
if (!show_colnames)
cli::cli_alert_info("With more than 100 cells, cell ids are hidden.")
annotation_columns = NULL
clusters = clusters %>% dplyr::arrange(cluster)
clusters
x[, clusters$cell, drop = FALSE]
x = x[, clusters$cell, drop = FALSE]
annotation_columns = data.frame(Cluster = clusters$cluster,
stringsAsFactors = FALSE)
rownames(annotation_columns) = clusters$cell
annotation_columns
x
log(x + 1)
# Call
data_transform = x
main = description
pheatmap(
data_transform,
show_rownames = show_rownames,
show_colnames = show_colnames,
cluster_cols = cluster_cols,
color = colorRampPalette(rev(
RColorBrewer::brewer.pal(n = 9, "Spectral")
))(100),
annotation_col = annotation_columns,
annotation_colors = list(
Cluster = get_clusters_colors(annotation_columns$Cluster)
),
main = paste0(description, " log-transformed counts"),
...
)
pheatmap(
data_transform,
show_rownames = show_rownames,
show_colnames = show_colnames,
cluster_cols = cluster_cols,
color = colorRampPalette(rev(
RColorBrewer::brewer.pal(n = 9, "Spectral")
))(100),
annotation_col = annotation_columns,
annotation_colors = list(
Cluster = get_clusters_colors(annotation_columns$Cluster)
),
main = main,
...
)
pheatmap(
data_transform,
show_rownames = show_rownames,
show_colnames = show_colnames,
cluster_cols = cluster_cols,
color = colorRampPalette(rev(
RColorBrewer::brewer.pal(n = 9, "Spectral")
))(100),
annotation_col = annotation_columns,
annotation_colors = list(
Cluster = get_clusters_colors(annotation_columns$Cluster)
),
main = main
)
pheatmap(
data_transform,
show_rownames = show_rownames,
show_colnames = show_colnames,
cluster_cols = cluster_cols,
color = colorRampPalette(rev(
RColorBrewer::brewer.pal(n = 9, "Spectral")
))(100),
annotation_col = annotation_columns,
annotation_colors = list(
Cluster = Rcongas:::get_clusters_colors(annotation_columns$Cluster)
),
main = main,
...
)
pheatmap(
data_transform,
show_rownames = show_rownames,
show_colnames = show_colnames,
cluster_cols = cluster_cols,
color = colorRampPalette(rev(
RColorBrewer::brewer.pal(n = 9, "Spectral")
))(100),
annotation_col = annotation_columns,
annotation_colors = list(
Cluster = Rcongas:::get_clusters_colors(annotation_columns$Cluster)
),
main = main)
main = description
main =' bocchini'
pheatmap(
data_transform,
show_rownames = show_rownames,
show_colnames = show_colnames,
cluster_cols = cluster_cols,
color = colorRampPalette(rev(
RColorBrewer::brewer.pal(n = 9, "Spectral")
))(100),
annotation_col = annotation_columns,
annotation_colors = list(
Cluster = Rcongas:::get_clusters_colors(annotation_columns$Cluster)
),
main = main)
Rcongas::get_DE_table(fit_nt, cut_pvalue = 1) %>% pull(gene)
genes = Rcongas::get_DE_table(fit_nt, cut_pvalue = 0.01) %>% pull(gene)
x = get_input_raw_data(fit_nt)
# Subset by gene
x = x[rownames(x) %in% genes, , drop = FALSE]
ng = nrow(x)
nc = ncol(x)
if(length(ng) == 0) {
cli::cli_alert_warning("No genes in the input data, returning empty plot...")
return(CNAqc:::eplot())
}
# Prompt
if(prompt)
{
cli::cli_alert_warning("You are about to plot {.field {ng}} genes and {.field {nc}} cells with pheatmap.
This may take a while if the values are large...")
ask = menu(c("Yes", "No"), title="Do you want this?")
if(ask == 2) return(CNAqc:::eplot())
}
# This plot uses pheatmap
require(pheatmap)
# colnames/rownames smart show, same for clustering
show_rownames = show_colnames = FALSE
cluster_cols = TRUE
if(ng < 100) show_rownames = TRUE
if(nc < 100) show_colnames = TRUE
if(!all(is.null(clusters))) cluster_cols = FALSE
if(!show_rownames) cli::cli_alert_info("With more than 100 genes, gene names are hidden.")
if(!show_colnames) cli::cli_alert_info("With more than 100 cells, cell ids are hidden.")
# Create annotations, only for clusters
annotation_columns = NULL
if(!all(is.null(clusters)))
{
# set ordering based on annotations
clusters = clusters %>% dplyr::arrange(cluster)
x = x[, clusters$cell, drop = FALSE]
annotation_columns = data.frame(Cluster = clusters$cluster, stringsAsFactors = FALSE)
rownames(annotation_columns) = clusters$cell
}
# Call
data_transform = x
main = description
if(lognormalise) {
x = log(x + 1)
main = paste0(description, " log-transformed counts")
}
pheatmap(
data_transform,
show_rownames = show_rownames,
show_colnames = show_colnames,
cluster_cols = cluster_cols,
color = colorRampPalette(rev(
RColorBrewer::brewer.pal(n = 9, "Spectral")
))(100),
annotation_col = annotation_columns,
annotation_colors = list(
Cluster = Rcongas:::get_clusters_colors(annotation_columns$Cluster)
),
main = main,
...
)
pheatmap(
data_transform,
show_rownames = show_rownames,
show_colnames = show_colnames,
cluster_cols = cluster_cols,
color = colorRampPalette(rev(
RColorBrewer::brewer.pal(n = 9, "Spectral")
))(100),
annotation_col = annotation_columns,
annotation_colors = list(
Cluster = Rcongas:::get_clusters_colors(annotation_columns$Cluster)
),
main = main  )
data_transform
x
x = get_input_raw_data(fit_nt)
genes
x[rownames(x) %in% genes, , drop = FALSE]
Rcongas:::plot_inference_report(fit_nt)
Rcongas:::plot_inference_report(fit_t) %>%
ggsave(filename = "SM_GBM_inference_report.png",
width = 10,
height = 12)
devtools::install_github('militeee/rcongas')
# DE genes raw table
Rcongas::plot_raw_data(
x = get_input_raw_data(fit_nt),
# genes = (get_input_raw_data(fit_nt) %>% rownames())[174:233],
genes = Rcongas::get_DE_table(fit_nt, cut_pvalue = 1) %>% pull(gene),
clusters = Rcongas::get_clusters(fit_nt),
prompt = F,
fontsize_row = 6,
filename = "SM_gbm_rawdata.png",
width = 11,
height = 7.5
)
Rcongas::plot_raw_data
require(Rcongas)
# DE genes raw table
Rcongas::plot_raw_data(
x = get_input_raw_data(fit_nt),
# genes = (get_input_raw_data(fit_nt) %>% rownames())[174:233],
genes = Rcongas::get_DE_table(fit_nt, cut_pvalue = 1) %>% pull(gene),
lognormalise = FALSE,
clusters = Rcongas::get_clusters(fit_nt),
prompt = F,
fontsize_row = 6,
filename = "SM_gbm_rawdata.png",
width = 11,
height = 7.5
)
require(Rcongas)
require(tidyverse)
library(cowplot)
# DE genes raw table
Rcongas::plot_raw_data(
x = get_input_raw_data(fit_nt),
# genes = (get_input_raw_data(fit_nt) %>% rownames())[174:233],
genes = Rcongas::get_DE_table(fit_nt, cut_pvalue = 1) %>% pull(gene),
lognormalise = FALSE,
clusters = Rcongas::get_clusters(fit_nt),
prompt = F,
fontsize_row = 6,
filename = "SM_gbm_rawdata.png",
width = 11,
height = 7.5
)
setwd("~/Projects/2020. CNAqc/pcawg")
library(tidyverse)
library(easypar)
library(evoverse)
library(CNAqc)
LF = list.files('fits', recursive = TRUE, full.names = TRUE)
# All QC table
qc_table_all = read_csv("CNAqc_summary_QC_all_entries.csv")
length(unique(qc_table_all$sample_id))
# QC table
qc_table = qc_table_all %>%
dplyr::filter(!is.na(QC)) %>%
left_join(ttypes)
ttypes = read_csv("PCAWG_tumour_types.csv")
ttypes %>% group_by(sample_id) %>% filter(n() > 1) %>% arrange(sample_id)
# All QC table
qc_table_all = read_csv("CNAqc_summary_QC_all_entries.csv")
length(unique(qc_table_all$sample_id))
# QC table
qc_table = qc_table_all %>%
dplyr::filter(!is.na(QC)) %>%
left_join(ttypes)
qc_table_all %>%
filter(!(sample_id %in% ttypes$sample_id))
qc_table %>% filter(is.na(ttype)) %>% pull(sample_id) %>% unique()
qc_table = read_csv("CNAqc_summary_QC.csv")
length(unique(qc_table$sample_id))
# Corrections for missing tumor types
qc_table %>%
filter(ttype == "Missing")
# secondary table ttypes
pcawg_donor_clinical_August2016_v6 = readr::read_tsv('pcawg_donor_clinical_August2016_v6.tsv')
pcawg_specimen_histology_August2016_v6 = readr::read_tsv('pcawg_specimen_histology_August2016_v6.tsv')
full_pcwag_other_table = pcawg_donor_clinical_August2016_v6 %>%
full_join(pcawg_specimen_histology_August2016_v6, by = 'icgc_donor_id')
missing_ttypes = qc_table %>% filter(is.na(ttype)) %>% pull(sample_id) %>% unique
possible_ids = sapply(strsplit(
pcawg_specimen_histology_August2016_v6$donor_unique_id,
"::"
), function(x)
x[2])
missing_ttypes %in% possible_ids %>% any
# Another table
specimens_with_mismatch_lane_count = read_tsv("specimens_with_mismatch_lane_count.txt")
specimens_with_mismatch_lane_count %>%
filter(aliquot_id %in% missing_ttypes)
#################################v
# Plots (macbook)
qc_table_ttype = qc_table %>% filter(!is.na(ttype))
length(unique(qc_table_ttype$sample_id))
all_counts = ggplot(qc_table) +
geom_bar(aes(ttype, fill = QC)) +
facet_wrap( ~ type) +
# coord_flip() +
scale_fill_manual(values = c(`PASS` = 'forestgreen', `FAIL` = 'indianred3')) +
CNAqc:::my_ggplot_theme() +
labs(title = "PCAWG peak and CCF analysis",
subtitle = paste0('n = ', length(unique(qc_table$sample_id)))) +
theme(axis.text.x = element_text(angle = 90, hjust = 0))
ggplot(qc_table_ttype) +
geom_bar(aes(ttype, fill = QC)) +
facet_wrap( ~ type) +
coord_flip() +
scale_fill_manual(values = c(`PASS` = 'forestgreen', `FAIL` = 'indianred3')) +
CNAqc:::my_ggplot_theme() +
labs(title = "PCAWG with CNAqc",
subtitle = paste0('n = ', length(unique(
qc_table_ttype$sample_id
)), " with known tumour type"))
ranking_perc_error_peaks =
qc_table_ttype %>%
filter(type == "Peaks") %>%
group_by(ttype, QC) %>%
summarise(n = n(), moffset = mean(offset, na.rm = TRUE)) %>%
mutate(p = n / sum(n)) %>%
ungroup %>%
arrange(QC, desc(p))
ranking_perc_error_peaks_points_scatter =
lapply(unique(ranking_perc_error_peaks$ttype),
function(tt)
{
xx = ranking_perc_error_peaks %>%
dplyr::filter(ttype == tt)
bb = xx[1,]
bb$n2 = xx$n[2]
bb$p2 = xx$p[2]
bb
}) %>% Reduce(f = bind_rows)
ncolors = ranking_perc_error_peaks$ttype %>% unique %>% length
many_colors = pals::cols25()
library(RColorBrewer)
n <- ncolors - 25
qual_col_pals = brewer.pal.info[c("Set1", "Dark2"), ]
col_vector = unlist(mapply(brewer.pal, qual_col_pals$maxcolors, rownames(qual_col_pals)))
col_vector = sample(col_vector, n)
many_colors = c(many_colors, col_vector)
pie(rep(1, ncolors), many_colors)
ranking_perc_error_peaks = ranking_perc_error_peaks %>%
mutate(highlight = QC == "FAIL" & n > 100 & p > 0.1)
scatter_pancan = ggplot(ranking_perc_error_peaks,
aes(
x = n,
y = p,
color = QC,
fill = ttype,
size = abs(moffset)
)) +
geom_hline(
yintercept = 0.1,
linetype = 'dashed',
size = .3,
color = 'gray50'
) +
geom_vline(
xintercept = 100,
linetype = 'dashed',
size = .3,
color = 'gray50'
) +
geom_segment(
data = ranking_perc_error_peaks_points_scatter %>%
filter(ttype != 'Missing'),
aes(
x = n,
y = p,
xend = n2,
yend = p2
),
inherit.aes = FALSE,
color = 'black',
size = .1
) +
ggrepel::geom_text_repel(
data = ranking_perc_error_peaks %>% filter(highlight),
aes(label = ttype),
# color = 'black',
size = 3,
show.legend = FALSE,
min.segment.length = 1,
segment.size = 0.2,
segment.color = "indianred",
nudge_x = 500 - ranking_perc_error_peaks %>% filter(highlight) %>% pull(n)
# point.padding = 3C
) +
# scale_size_continuous(limits = c(3,5))+
geom_point(pch = 21, stroke = 1) +
scale_fill_manual(values = many_colors) +
CNAqc:::my_ggplot_theme() +
scale_color_manual(values = c(`PASS` = 'forestgreen', `FAIL` = 'indianred')) +
labs(
title = "Peak analysis with PCAWG",
y = "%cases with QC PASS or FAIL",
x = "Total QC cases per tumour type",
subtitle = paste0('n = ', length(unique(
qc_table_ttype$sample_id
)), " with known tumour type")
) +
guides(size = guide_legend("Mismatch"),
fill = guide_legend("Tumour type", ncol = 1)) +
theme(legend.position = 'left')
scatter_pancan = ggplot(ranking_perc_error_peaks,
aes(
x = n,
y = p,
color = QC,
fill = ttype,
size = abs(moffset)
)) +
geom_hline(
yintercept = 0.1,
linetype = 'dashed',
size = .3,
color = 'gray50'
) +
geom_vline(
xintercept = 100,
linetype = 'dashed',
size = .3,
color = 'gray50'
) +
geom_segment(
data = ranking_perc_error_peaks_points_scatter %>%
filter(ttype != 'Missing'),
aes(
x = n,
y = p,
xend = n2,
yend = p2
),
inherit.aes = FALSE,
color = 'black',
size = .1
) +
# ggrepel::geom_text_repel(
#   data = ranking_perc_error_peaks %>% filter(highlight),
#   aes(label = ttype),
#   # color = 'black',
#   size = 3,
#   show.legend = FALSE,
#   min.segment.length = 1,
#   segment.size = 0.2,
#   segment.color = "indianred",
#   nudge_x = 500 - ranking_perc_error_peaks %>% filter(highlight) %>% pull(n)
#   # point.padding = 3C
# ) +
# scale_size_continuous(limits = c(3,5))+
geom_point(pch = 21, stroke = 1) +
scale_fill_manual(values = many_colors) +
CNAqc:::my_ggplot_theme() +
scale_color_manual(values = c(`PASS` = 'forestgreen', `FAIL` = 'indianred')) +
labs(
title = "Peak analysis with PCAWG",
y = "%cases with QC PASS or FAIL",
x = "Total QC cases per tumour type",
subtitle = paste0('n = ', length(unique(
qc_table_ttype$sample_id
)), " with known tumour type")
) +
guides(size = guide_legend("Mismatch"),
fill = guide_legend("Tumour type", ncol = 1)) +
theme(legend.position = 'left')
scatter_pancan = ggExtra::ggMarginal(
scatter_pancan,
type = "histogram",
margins = 'both',
size = 5,
colour = 'white',
fill = '#6B6965'
)
# Purity
single_t = ranking_perc_error_peaks %>% filter(highlight)
single_t = single_t$ttype
PCAWG_cov = readr::read_csv('Cohort_covariates.csv') %>%
rename(sample_id = sample)
qc_table %>%
filter(ttype %in% single_t) %>%
left_join(PCAWG_cov) %>%
filter(type == "Peaks") %>%
ggplot(aes(
x = cut(purity, breaks = seq(0, 1, 0.1)) ,
y = offset,
fill = ttype
)) +
geom_histogram() +
facet_wrap( ~ cut(purity, breaks = seq(0, 1, 0.1))) +
# facet_grid(karyotype~QC) +
CNAqc:::my_ggplot_theme() +
ggsci::scale_fill_lancet()
ggarrange(
all_counts,
scatter_pancan,
labels = c('a', 'b'),
heights = c(1, 2),
ncol = 1
)  %>%
ggsave(filename = "~/Projects/2020. CNAqc/pcawg/Figure_MT_PCAWG.png",
width = 10,
height = 11.5)
