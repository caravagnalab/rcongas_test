length = unit(0.10, "cm"),
# ends = "first",
type = "closed"
)
) +
geom_point(
pch = 21,
size = 6,
aes(
# size = peak_closest_score,
# shape = run,
color = peak_closest_QC,
fill = run
)
) +
CNAqc:::my_ggplot_theme() +
# scale_color_manual(values = c(`PASS` = 'forestgreen', `FAIL` = 'indianred3')) +
# scale_y_continuous(breaks = 1:5) +
# xlim(0.4, 1) +
scale_size_continuous(range = c(2, 4)) +
guides(
color = guide_legend('QC'),
shape = guide_legend('Run'),
size = guide_legend('Score')
) +
labs(title = "Closest-matching peak")
p1
p1 = ggplot(df,
aes(x = purity, y = ploidy)) +
geom_segment(
aes(xend = suggested_closest, yend = ploidy),
arrow = arrow(
length = unit(0.10, "cm"),
# ends = "first",
type = "closed"
)
) +
geom_point(
pch = 21,
size = 6,
aes(
# size = peak_closest_score,
# shape = run,
color = peak_closest_QC,
fill = run
)
) +
ggsci::scale_fill_lancet() +
CNAqc:::my_ggplot_theme() +
# scale_color_manual(values = c(`PASS` = 'forestgreen', `FAIL` = 'indianred3')) +
# scale_y_continuous(breaks = 1:5) +
# xlim(0.4, 1) +
scale_size_continuous(range = c(2, 4)) +
guides(
color = guide_legend('QC'),
shape = guide_legend('Run'),
size = guide_legend('Score')
) +
labs(title = "Closest-matching peak")
p1
p1 = ggplot(df,
aes(x = purity, y = ploidy)) +
geom_segment(
aes(xend = suggested_closest, yend = ploidy),
arrow = arrow(
length = unit(0.10, "cm"),
# ends = "first",
type = "closed"
)
) +
geom_point(
pch = 21,
size = 6,
aes(
# size = peak_closest_score,
# shape = run,
color = peak_closest_QC,
fill = run
)
) +
ggsci::scale_fill_lancet() +
CNAqc:::my_ggplot_theme() +
scale_color_manual(values = c(`PASS` = 'forestgreen', `FAIL` = 'indianred3')) +
# scale_y_continuous(breaks = 1:5) +
# xlim(0.4, 1) +
scale_size_continuous(range = c(2, 4)) +
guides(
color = guide_legend('QC'),
shape = guide_legend('Run'),
size = guide_legend('Score')
) +
labs(title = "Closest-matching peak")
p1
p1 = ggplot(df,
aes(x = purity, y = ploidy)) +
geom_segment(
aes(xend = suggested_closest, yend = ploidy),
arrow = arrow(
length = unit(0.10, "cm"),
# ends = "first",
type = "closed"
)
) +
geom_point(
pch = 21,
size = 6,
lwd = 4,
aes(
# size = peak_closest_score,
# shape = run,
color = peak_closest_QC,
fill = run
)
) +
ggsci::scale_fill_lancet() +
CNAqc:::my_ggplot_theme() +
scale_color_manual(values = c(`PASS` = 'forestgreen', `FAIL` = 'indianred3')) +
# scale_y_continuous(breaks = 1:5) +
# xlim(0.4, 1) +
scale_size_continuous(range = c(2, 4)) +
guides(
color = guide_legend('QC'),
shape = guide_legend('Run'),
size = guide_legend('Score')
) +
labs(title = "Closest-matching peak")
p1
p1 = ggplot(df,
aes(x = purity, y = ploidy)) +
geom_segment(
aes(xend = suggested_closest, yend = ploidy),
arrow = arrow(
length = unit(0.10, "cm"),
# ends = "first",
type = "closed"
)
) +
geom_point(
pch = 21,
size = 6,
stroke = 4,
aes(
# size = peak_closest_score,
# shape = run,
color = peak_closest_QC,
fill = run
)
) +
ggsci::scale_fill_lancet() +
CNAqc:::my_ggplot_theme() +
scale_color_manual(values = c(`PASS` = 'forestgreen', `FAIL` = 'indianred3')) +
# scale_y_continuous(breaks = 1:5) +
# xlim(0.4, 1) +
scale_size_continuous(range = c(2, 4)) +
guides(
color = guide_legend('QC'),
shape = guide_legend('Run'),
size = guide_legend('Score')
) +
labs(title = "Closest-matching peak")
p1
p1 = ggplot(df,
aes(x = purity, y = ploidy)) +
geom_segment(
aes(xend = suggested_closest, yend = ploidy),
arrow = arrow(
length = unit(0.10, "cm"),
# ends = "first",
type = "closed"
)
) +
geom_point(
pch = 21,
size = 6,
stroke = 2,
aes(
# size = peak_closest_score,
# shape = run,
color = peak_closest_QC,
fill = run
)
) +
ggsci::scale_fill_lancet() +
CNAqc:::my_ggplot_theme() +
scale_color_manual(values = c(`PASS` = 'forestgreen', `FAIL` = 'indianred3')) +
# scale_y_continuous(breaks = 1:5) +
# xlim(0.4, 1) +
scale_size_continuous(range = c(2, 4)) +
guides(
color = guide_legend('QC'),
shape = guide_legend('Run'),
size = guide_legend('Score')
) +
labs(title = "Closest-matching peak")
p1
p1 = ggplot(df,
aes(x = purity, y = ploidy)) +
geom_segment(
aes(xend = suggested_closest, yend = ploidy),
arrow = arrow(
length = unit(0.10, "cm"),
# ends = "first",
type = "closed"
)
) +
geom_point(
pch = 21,
size = 6,
stroke = 2,
aes(
# size = peak_closest_score,
# shape = run,
color = peak_closest_QC,
fill = run
)
) +
ggsci::scale_fill_jama() +
CNAqc:::my_ggplot_theme() +
scale_color_manual(values = c(`PASS` = 'forestgreen', `FAIL` = 'indianred3')) +
# scale_y_continuous(breaks = 1:5) +
# xlim(0.4, 1) +
scale_size_continuous(range = c(2, 4)) +
guides(
color = guide_legend('QC'),
shape = guide_legend('Run'),
size = guide_legend('Score')
) +
labs(title = "Closest-matching peak")
p1
p1 = ggplot(df,
aes(x = purity, y = ploidy)) +
geom_segment(
aes(xend = suggested_closest, yend = ploidy),
arrow = arrow(
length = unit(0.10, "cm"),
# ends = "first",
type = "closed"
)
) +
geom_point(
pch = 21,
size = 3.5,
stroke = 2,
aes(
# size = peak_closest_score,
# shape = run,
color = peak_closest_QC,
fill = run
)
) +
ggsci::scale_fill_jama() +
CNAqc:::my_ggplot_theme() +
scale_color_manual(values = c(`PASS` = 'forestgreen', `FAIL` = 'indianred3')) +
# scale_y_continuous(breaks = 1:5) +
# xlim(0.4, 1) +
scale_size_continuous(range = c(2, 4)) +
guides(
color = guide_legend('QC'),
shape = guide_legend('Run'),
size = guide_legend('Score')
) +
labs(title = "Closest-matching peak")
p1
p1 = ggplot(df,
aes(x = purity, y = ploidy)) +
geom_segment(
aes(xend = suggested_closest, yend = ploidy),
arrow = arrow(
length = unit(0.10, "cm"),
# ends = "first",
type = "closed"
)
) +
geom_point(
pch = 21,
size = 3.5,
stroke = 2,
aes(
# size = peak_closest_score,
# shape = run,
color = peak_closest_QC,
fill = run
)
) +
ggsci::scale_fill_jama() +
CNAqc:::my_ggplot_theme() +
scale_color_manual(values = c(`PASS` = 'forestgreen', `FAIL` = 'indianred3')) +
scale_size_continuous(range = c(2, 4)) +
guides(
color = guide_legend('QC'),
shape = guide_legend('Run'),
size = guide_legend('Score')
) +
labs(title = "Closest-matching peak")
p1
arrow
p2 = ggplot(df,
aes(x = purity, y = ploidy)) +
geom_segment(
aes(xend = suggested_rightmost, yend = ploidy),
arrow = arrow(
length = unit(0.10, "cm"),
linetype =
type = "closed"
)
) +
geom_point(
pch = 21,
size = 3.5,
stroke = 2,
aes(
color = peak_rightmost_QC,
fill = run
)
) +
ggsci::scale_fill_jama() +
CNAqc:::my_ggplot_theme() +
scale_color_manual(values = c(`PASS` = 'forestgreen', `FAIL` = 'indianred3')) +
scale_size_continuous(range = c(2, 4)) +
guides(
color = guide_legend('QC'),
shape = guide_legend('Run'),
size = guide_legend('Score')
) +
labs(title = "Rightmost-matching peak")
p2 = ggplot(df,
aes(x = purity, y = ploidy)) +
geom_segment(
aes(xend = suggested_rightmost, yend = ploidy),
arrow = arrow(
length = unit(0.10, "cm"),
linetype =
type = "closed"
)
) +
geom_point(
pch = 21,
size = 3.5,
stroke = 2,
aes(
color = peak_rightmost_QC,
fill = run
)
) +
ggsci::scale_fill_jama() +
CNAqc:::my_ggplot_theme() +
scale_color_manual(values = c(`PASS` = 'forestgreen', `FAIL` = 'indianred3')) +
scale_size_continuous(range = c(2, 4)) +
guides(
color = guide_legend('QC'),
shape = guide_legend('Run'),
size = guide_legend('Score')
) +
labs(title = "Rightmost-matching peak")
source('/Volumes/Data/Dropbox/Research Projects/2020. CNAqc/src/functions_library.R')
p1 = ggplot(df,
aes(x = purity, y = ploidy)) +
geom_segment(aes(xend = suggested_closest, yend = ploidy),
arrow = arrow(length = unit(0.10, "cm"),
type = "closed")) +
geom_point(
pch = 21,
size = 3.5,
stroke = 2,
aes(# size = peak_closest_score,
# shape = run,
color = peak_closest_QC,
fill = run)
) +
ggsci::scale_fill_jama() +
CNAqc:::my_ggplot_theme() +
scale_color_manual(values = c(`PASS` = 'forestgreen', `FAIL` = 'indianred3')) +
scale_size_continuous(range = c(2, 4)) +
guides(
color = guide_legend('QC'),
shape = guide_legend('Run'),
size = guide_legend('Score')
) +
labs(title = "Closest-matching peak")
p2 = ggplot(df,
aes(x = purity, y = ploidy)) +
geom_segment(aes(xend = suggested_rightmost, yend = ploidy),
arrow = arrow(length = unit(0.10, "cm"),
type = "closed")) +
geom_point(
pch = 21,
size = 3.5,
stroke = 2,
aes(color = peak_rightmost_QC,
fill = run)
) +
ggsci::scale_fill_jama() +
CNAqc:::my_ggplot_theme() +
scale_color_manual(values = c(`PASS` = 'forestgreen', `FAIL` = 'indianred3')) +
scale_size_continuous(range = c(2, 4)) +
guides(
color = guide_legend('QC'),
shape = guide_legend('Run'),
size = guide_legend('Score')
) +
labs(title = "Rightmost-matching peak")
peak_analysis = ggarrange(p1, p2, common.legend = TRUE, legend = 'right')
peak_analysis
# peak closest
peaks_closest = ggarrange(
CNAqc::plot_peaks_analysis(first_run$analysis$peaks$closest),
CNAqc::plot_peaks_analysis(second_run$analysis$peaks$closest),
CNAqc::plot_peaks_analysis(final_run$analysis$peaks$closest),
nrow = 3,
ncol = 1
)
peaks_closest
# peak closest
peaks_closest = ggarrange(
CNAqc::plot_peaks_analysis(first_run$analysis$peaks$closest),
CNAqc::plot_peaks_analysis(second_run$analysis$peaks$closest),
CNAqc::plot_peaks_analysis(final_run$analysis$peaks$closest),
CNAqc::plot_peaks_analysis(lowcell_run$analysis$peaks$closest),
nrow = 4,
ncol = 1
)
peaks_closest
source('/Volumes/Data/Dropbox/Research Projects/2020. CNAqc/src/functions_library.R')
source('/Volumes/Data/Dropbox/Research Projects/2020. CNAqc/src/functions_library.R')
for (sample in names(sample_mutations))
{
first_run = load_SQ_output(sample, 'first', sample_mutations)
second_run = load_SQ_output(sample, 'second', sample_mutations)
final_run = load_SQ_output(sample, 'final', sample_mutations)
lowcell_run = load_SQ_output(sample, 'lowcell', sample_mutations)
plot_runs(sample, first_run, second_run, final_run)
}
for (sample in names(sample_mutations))
{
print(sample)
first_run = load_SQ_output(sample, 'first', sample_mutations)
second_run = load_SQ_output(sample, 'second', sample_mutations)
final_run = load_SQ_output(sample, 'final', sample_mutations)
lowcell_run = load_SQ_output(sample, 'lowcell', sample_mutations)
plot_runs(sample, first_run, second_run, final_run)
}
sample = 'Set6_42'
first_run = load_SQ_output(sample, 'first', sample_mutations)
second_run = load_SQ_output(sample, 'second', sample_mutations)
final_run = load_SQ_output(sample, 'final', sample_mutations)
lowcell_run = load_SQ_output(sample, 'lowcell', sample_mutations)
for (sample in names(sample_mutations))
{
print(sample)
first_run = load_SQ_output(sample, 'first', sample_mutations)
second_run = load_SQ_output(sample, 'second', sample_mutations)
final_run = load_SQ_output(sample, 'final', sample_mutations)
lowcell_run = load_SQ_output(sample, 'lowcell', sample_mutations)
plot_runs(sample, first_run, second_run, final_run, lowcell_run)
}
ggplot(df,
aes(x = purity, y = ploidy)) +
geom_segment(aes(xend = suggested_rightmost, yend = ploidy),
arrow = arrow(length = unit(0.10, "cm"),
type = "closed")) +
geom_point(
pch = 21,
size = 2.5,
stroke = 2,
aes(color = peak_rightmost_QC,
fill = run)
)
source('/Volumes/Data/Dropbox/Research Projects/2020. CNAqc/src/functions_library.R')
source('/Volumes/Data/Dropbox/Research Projects/2020. CNAqc/src/functions_library.R')
for (sample in names(sample_mutations))
{
print(sample)
first_run = load_SQ_output(sample, 'first', sample_mutations)
second_run = load_SQ_output(sample, 'second', sample_mutations)
final_run = load_SQ_output(sample, 'final', sample_mutations)
lowcell_run = load_SQ_output(sample, 'lowcell', sample_mutations)
plot_runs(sample, first_run, second_run, final_run, lowcell_run)
}
# Set7
set7 = vcfR::read.vcfR("./final_sequenza_mseq//Set.07.WGS.merged_filtered.vcf")
info_tidy = vcfR::extract_info_tidy(set7)
fix_tidy = set7@fix %>%
as_tibble %>%
rename(
chr = CHROM,
from = POS,
ref = REF,
alt = ALT
) %>%
mutate(from = as.numeric(from), to = from + nchar(alt))
geno_tidy = vcfR::extract_gt_tidy(set7) %>%
group_split(Indiv)
sample_mutations = lapply(geno_tidy, function(x) {
bind_cols(info_tidy, fix_tidy) %>%
full_join(x) %>%
mutate(DP = as.numeric(gt_NR), NV = as.numeric(gt_NV)) %>%
mutate(VAF = NV / DP) %>%
select(chr, from, to, ref, alt, NV, DP, VAF, everything()) %>%
filter(!is.na(VAF), VAF > 0)
})
names(sample_mutations) = sapply(sample_mutations, function(x)
x$Indiv[1])
sample_mutations = sample_mutations[!is.na(names(sample_mutations))]
sample_mutations = sample_mutations[!is.na(names(sample_mutations))]
for (sample in names(sample_mutations))
{
first_run = load_SQ_output(sample, 'first', sample_mutations)
second_run = load_SQ_output(sample, 'second', sample_mutations)
final_run = load_SQ_output(sample, 'final', sample_mutations)
lowcell_run = load_SQ_output(sample, 'lowcell', sample_mutations)
plot_runs(sample, first_run, second_run, final_run, lowcell_run)
}
