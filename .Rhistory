RNA = Rcongas::get_counts(x, normalise = normalised, z_score = z_score) %>%
Rcongas:::idify()
normalised = TRUE
z_score=T
# summary stats
ngenes = sum(Rcongas::get_input_segmentation(x)$mu)
nsegments = nrow(Rcongas::get_input_segmentation(x))
MB_covered = round(sum(Rcongas::get_input_segmentation(x)$size) / 10 ^ 6)
# prepare plot caption
# caption = paste0("RNA counts are ",
#                  ifelse(normalised, "normalised.", "not normalised."))
caption = ""
# Cluster assignments
clustering = Rcongas::get_clusters(x) %>%
dplyr::arrange(desc(cluster))
# Clustering assignments plot
clusters_colors = Rcongas:::get_clusters_colors(clustering$cluster)
# Change the legend and palettes for the z-score
rna_plot = rna_plot +
scale_fill_gradient2(low = "steelblue", high = 'indianred3') +
guides(fill = guide_colorbar("Z-score", barwidth = unit(3, 'cm')))
# RNA plot
rna_plot = ggplot(RNA) +
geom_tile(aes(
x = factor(label_chr, levels = gtools::mixedsort(label_chr) %>% unique()),
y = factor(cell, levels = clustering$cell),
fill = n
)) +
CNAqc:::my_ggplot_theme() +
labs(y = "Cell", x = "Segment") +
theme(axis.text.y = element_blank(),
axis.text.x = element_text(angle = 90, hjust = 1)) +
guides(fill = guide_colorbar("Counts", barwidth = unit(3, 'cm'))) +
labs(
# titl = paste0("Raw CONGAS dataset (k =", Rcongas::get_k(x), ')'),
title = paste0(
ngenes,
" genes (",
nsegments,
" segments, ",
MB_covered,
" Mb)"
)
)
# Get segments_input
segments_input = x$data$counts
# Special ones to highlight
segments_ids = Rcongas::get_clones_ploidy(fit) %>%
Rcongas:::idify() %>%
filter(highlight) %>%
pull(segment_id) %>%
unique()
segments_ids
input_segments
segments_ids
# RNA data
RNA = Rcongas::get_counts(x, normalise = normalised, z_score = z_score) %>%
Rcongas:::idify()
RNA
RNA = dplyr::left_join(RNA,
input_segments %>% dplyr::select(segment_id, label_chr),
by = "segment_id") %>%
dplyr::rename(segment = segment_id)
RNA
# summary stats
ngenes = sum(Rcongas::get_input_segmentation(x)$mu)
nsegments = nrow(Rcongas::get_input_segmentation(x))
MB_covered = round(sum(Rcongas::get_input_segmentation(x)$size) / 10 ^ 6)
# prepare plot caption
# caption = paste0("RNA counts are ",
#                  ifelse(normalised, "normalised.", "not normalised."))
caption = ""
# Cluster assignments
clustering = Rcongas::get_clusters(x) %>%
dplyr::arrange(desc(cluster))
# Clustering assignments plot
clusters_colors = Rcongas:::get_clusters_colors(clustering$cluster)
# RNA plot
rna_plot = ggplot(RNA) +
geom_tile(aes(
x = factor(label_chr, levels = gtools::mixedsort(label_chr) %>% unique()),
y = factor(cell, levels = clustering$cell),
fill = n
)) +
CNAqc:::my_ggplot_theme() +
labs(y = "Cell", x = "Segment") +
theme(axis.text.y = element_blank(),
axis.text.x = element_text(angle = 90, hjust = 1)) +
guides(fill = guide_colorbar("Counts", barwidth = unit(3, 'cm'))) +
labs(
# titl = paste0("Raw CONGAS dataset (k =", Rcongas::get_k(x), ')'),
title = paste0(
ngenes,
" genes (",
nsegments,
" segments, ",
MB_covered,
" Mb)"
)
)
# Change the legend and palettes for the z-score
rna_plot = rna_plot +
scale_fill_gradient2(low = "steelblue", high = 'indianred3') +
guides(fill = guide_colorbar("Z-score", barwidth = unit(3, 'cm')))
rna_plot
# Annotate special areas of the tile - first split the clusters
nclusters = Rcongas::get_k(x)
cluster_size = Rcongas::get_clusters_size(x)
nclusters
rna_plot = rna_plot +
geom_hline(yintercept = cumsum(cluster_size[-1]),
size = 0.3,
linetype = 'dashed')
RNA$label_chr
annotation_color = 'mediumseagreen'
order_x_axis = gtools::mixedsort(RNA$label_chr) %>% unique()
order_x_axis
Reduce(dplyr::bind_rows,
lapply(chrs_to_annotate, function(y) {
data.frame(
xmin = which(y == order_x_axis) - 0.5,
xmax = which(y == order_x_axis) + 0.5,
ymin = 0,
ymax = Inf
)
}))
chrs_to_annotate = Rcongas::get_segment_test_counts(x,
group1 = 1,
group2 = 2,
cutoff_p = cutoff_p) %>%
dplyr::filter(sign) %>%
Rcongas:::idify() %>%
dplyr::left_join(RNA %>% Rcongas:::idify(), by = 'segment_id') %>%
dplyr::select(segment_id, label_chr) %>%
dplyr::pull(label_chr) %>%
unique()
cutoff_p=1e-4
chrs_to_annotate = Rcongas::get_segment_test_counts(x,
group1 = 1,
group2 = 2,
cutoff_p = cutoff_p) %>%
dplyr::filter(sign) %>%
Rcongas:::idify() %>%
dplyr::left_join(RNA %>% Rcongas:::idify(), by = 'segment_id') %>%
dplyr::select(segment_id, label_chr) %>%
dplyr::pull(label_chr) %>%
unique()
chrs_to_annotate
Rcongas::get_segment_test_counts(x,
group1 = 1,
group2 = 2,
cutoff_p = cutoff_p)
RNA %>% Rcongas:::idify()
Rcongas::get_clones_ploidy(fit) %>%
Rcongas:::idify() %>%
filter(highlight) %>%
dplyr::left_join(RNA %>% Rcongas:::idify(), by = 'segment_id')
Rcongas::get_clones_ploidy(fit) %>%
Rcongas:::idify() %>%
filter(highlight) %>%
dplyr::left_join(RNA %>% Rcongas:::idify(), by = 'segment_id') %>%
dplyr::select(segment_id, label_chr)
# Special ones to highlight
segments_ids = Rcongas::get_clones_ploidy(fit) %>%
Rcongas:::idify() %>%
filter(highlight) %>%
dplyr::left_join(RNA %>% Rcongas:::idify(), by = 'segment_id') %>%
dplyr::select(segment_id, label_chr) %>%
dplyr::pull(label_chr) %>%
unique()
chrs_to_annotate
Rcongas::get_clones_ploidy(fit) %>%
Rcongas:::idify() %>%
filter(highlight)
Rcongas::get_clones_ploidy(fit) %>%
Rcongas:::idify() %>%
filter(highlight) %>%
dplyr::left_join(RNA %>% Rcongas:::idify(), by = 'segment_id')
Rcongas::get_clones_ploidy(fit) %>%
Rcongas:::idify() %>%
filter(highlight)
RNA %>% Rcongas:::idify()
Rcongas::get_clones_ploidy(fit) %>%
Rcongas:::idify() %>%
filter(highlight) %>%
dplyr::left_join(RNA %>% Rcongas:::idify(), by = 'segment_id')
Rcongas::get_clones_ploidy(fit) %>%
Rcongas:::idify() %>%
filter(highlight)
Rcongas::get_clones_ploidy(fit) %>%
Rcongas:::idify() %>%
filter(highlight) %>%
select(segment_id)
Rcongas::get_clones_ploidy(fit) %>%
Rcongas:::idify() %>%
filter(highlight) %>%
select(segment_id) %>%
dplyr::left_join(RNA %>% Rcongas:::idify(), by = 'segment_id')
RNA %>%
Rcongas:::idify()
RNA %>%
Rcongas:::idify() %>%
distinct(segment_id)
Rcongas::get_clones_ploidy(fit) %>%
Rcongas:::idify() %>%
filter(highlight) %>%
select(segment_id) %>%
dplyr::left_join(RNA %>%
Rcongas:::idify() %>%
distinct(segment_id), by = 'segment_id')
RNA %>%
Rcongas:::idify() %>%
distinct(segment_id)
RNA %>%
Rcongas:::idify() %>%
distinct(segment_id, label_chr)
# Special ones to highlight
segments_ids = Rcongas::get_clones_ploidy(fit) %>%
Rcongas:::idify() %>%
filter(highlight) %>%
select(segment_id) %>%
dplyr::left_join(RNA %>%
Rcongas:::idify() %>%
distinct(segment_id, label_chr), by = 'segment_id') %>%
dplyr::select(segment_id, label_chr) %>%
dplyr::pull(label_chr) %>%
unique()
segments_ids
# Special ones to highlight
segments_ids = Rcongas::get_clones_ploidy(fit) %>%
Rcongas:::idify() %>%
filter(highlight) %>%
select(segment_id) %>%
dplyr::left_join(RNA %>%
Rcongas:::idify() %>%
distinct(segment_id, label_chr), by = 'segment_id') %>%
dplyr::select(segment_id, label_chr) %>%
dplyr::pull(label_chr) %>%
unique()
annotation_color = 'mediumseagreen'
order_x_axis = gtools::mixedsort(RNA$label_chr) %>% unique()
chrs_to_annotate = Reduce(dplyr::bind_rows,
lapply(chrs_to_annotate, function(y) {
data.frame(
xmin = which(y == order_x_axis) - 0.5,
xmax = which(y == order_x_axis) + 0.5,
ymin = 0,
ymax = Inf
)
}))
chrs_to_annotate
rna_plot = rna_plot +
geom_rect(
data = chrs_to_annotate,
aes(
xmin = xmin,
xmax = xmax,
ymin = ymin,
ymax = ymax
),
fill = NA,
color = annotation_color,
alpha = .2,
size = 0.1
)
rna_plot
# Special ones to highlight
segments_ids = Rcongas::get_clones_ploidy(fit) %>%
Rcongas:::idify() %>%
filter(highlight) %>%
select(segment_id) %>%
dplyr::left_join(RNA %>%
Rcongas:::idify() %>%
distinct(segment_id, label_chr), by = 'segment_id') %>%
dplyr::select(segment_id, label_chr) %>%
dplyr::pull(label_chr) %>%
unique()
segments_ids
chrs_to_annotate
# Special ones to highlight
segments_ids = Rcongas::get_clones_ploidy(fit) %>%
Rcongas:::idify() %>%
filter(highlight) %>%
select(segment_id) %>%
dplyr::left_join(RNA %>%
Rcongas:::idify() %>%
distinct(segment_id, label_chr), by = 'segment_id') %>%
dplyr::select(segment_id, label_chr) %>%
dplyr::pull(label_chr) %>%
unique()
chrs_to_annotate
chrs_to_annotate = Reduce(dplyr::bind_rows,
lapply(segments_ids, function(y) {
data.frame(
xmin = which(y == order_x_axis) - 0.5,
xmax = which(y == order_x_axis) + 0.5,
ymin = 0,
ymax = Inf
)
}))
chrs_to_annotate
ngenes
Rcongas::get_input_segmentation(x)$mu
Rcongas::get_input_segmentation(x)
counts_plot[[1]]
# Comparison with clonealign
congas_clusterings = Rcongas::get_clusters(fit) %>% select(cell, cluster) %>%
rename(congas = cluster) %>% as_tibble()
# Giulio
intersection_congas_clonealign = Rcongas::intersection_congas_clonealign
intersection_congas_clonealign$cluster <- Rcongas:::get_cluster_assignments(fit)
intersection_congas_clonealign = intersection_congas_clonealign %>%
rename(CONGAS = cluster, clonealign = clone)
# clonealign_clusterings = Rcongas::get_clusters(fit) %>% select(cell, cluster) %>%
#   rename(clonealign = cluster) %>% as_tibble()
joint_clusters = intersection_congas_clonealign %>%
group_by(CONGAS, clonealign) %>%
summarise(n = n()) %>% mutate(CONGAS = paste(CONGAS))
require(ggalluvial)
require(pdfCluster)
clonalign_comparison_plot = ggplot(joint_clusters,
aes(y = n, axis1 = CONGAS, axis2 = clonealign)) +
geom_alluvium(aes(fill = CONGAS), width = 1 / 12) +
geom_stratum(width = 1 / 12,
fill = "black",
color = "grey") +
geom_label(stat = "stratum", aes(label = after_stat(stratum))) +
scale_x_discrete(limits = c("CONGAS", "clonealign"),
expand = c(.05, .05)) +
scale_fill_brewer(type = "qual", palette = "Set1") +
CNAqc:::my_ggplot_theme() +
guides(fill = guide_legend("cluster")) +
labs(title = "Comparison with clonealign", y = 'Cell',
caption = paste0('Adjusted Rand Index:', round(pdfCluster::adj.rand.index(intersection_congas_clonealign$CONGAS,
intersection_congas_clonealign$clonealign), digits = 2), "."))
clonalign_comparison_plot
CNA_wg_plot
mixing_plot
# Strips
top_strip =  plot_grid(
CNA_wg_plot,
mixing_plot,
nrow = 1,
rel_widths = c(1, .3),
align = 'h',
labels = c("a", "b")
)
mid_strip =  plot_grid(
rna_plot_raw,
# counts_plot,
DE_full_plot,
nrow = 1,
rel_widths = c(.7, .3),
align = 'h',
axis = 'b',
labels = c("c", "d")
)
names(counts_plot)
# Chromosome 15 special counts plot
segments_ids = Rcongas::get_clones_ploidy(fit) %>%
Rcongas:::idify() %>%
filter(highlight) %>%
pull(segment_id) %>%
unique()
segments_ids
counts_plot = Rcongas::plot_segment_density(
fit,
segments_ids = segments_ids
)
names(counts_plot) = segments_ids
bottom_strip = plot_grid(
counts_plot$`chr15:67050001:102600000`,
counts_plot$`chr16:1:3750000`,
counts_plot$`chr18:32400001:55950000`,
clonalign_comparison_plot,
axis = 'b',
nrow = 1,
labels = c("e", "f", "g")
)
plot_grid(
top_strip,
mid_strip,
bottom_strip,
rel_heights = c(.8, 1, .8),
ncol = 1
) %>%
ggsave(filename = "breast_xeno_10x_Main_text.pdf",
width = 12,
height = 10)
plot_grid(
top_strip,
mid_strip,
bottom_strip,
rel_heights = c(.8, 1, .8),
ncol = 1
) %>%
ggsave(filename = "breast_xeno_10x_Main_text.png",
width = 12,
height = 10)
require(devtools)
load_all('../rcongas/')
require(Rcongas)
require(tidyverse)
library(cowplot)
# Final model fit
fit = Rcongas::breast_xeno_10x_small_segments_total_CN_norm
input_raw_counts_genes = Rcongas::get_input_raw_data(fit)
# DE plot
DE_full_plot = Rcongas::plot_DE_volcano(fit, annotate_top = 7) +
labs(title = "Differential Expression")
# Mixing
mixing_plot = Rcongas::plot_mixing_proportions(fit)
# Whole-genome plot
CNA_wg_plot = Rcongas::plot_gw_cna_profiles(fit, whole_genome = TRUE, cutoff_p = 0.001) +
labs(title = "Breast cancer xenograft (10x scRNAseq)")
# Chromosome 15 special counts plot
segments_ids = Rcongas::get_clones_ploidy(fit) %>%
Rcongas:::idify() %>%
filter(highlight) %>%
pull(segment_id) %>%
unique()
counts_plot = Rcongas::plot_segment_density(
fit,
segments_ids = segments_ids
)
names(counts_plot) = segments_ids
# z-score input RNA with clustering assignments
rna_plot_raw = Rcongas::plot_counts_rna_segments(fit, z_score = TRUE, cutoff_p = 0.001)
# Comparison with clonealign
congas_clusterings = Rcongas::get_clusters(fit) %>% select(cell, cluster) %>%
rename(congas = cluster) %>% as_tibble()
load_all('../rcongas/')
# z-score input RNA with clustering assignments
rna_plot_raw = Rcongas::plot_counts_rna_segments(fit, z_score = TRUE, cutoff_p = 0.001)
# Comparison with clonealign
congas_clusterings = Rcongas::get_clusters(fit) %>% select(cell, cluster) %>%
rename(congas = cluster) %>% as_tibble()
# Giulio
intersection_congas_clonealign = Rcongas::intersection_congas_clonealign
intersection_congas_clonealign$cluster <- Rcongas:::get_cluster_assignments(fit)
intersection_congas_clonealign = intersection_congas_clonealign %>%
rename(CONGAS = cluster, clonealign = clone)
# clonealign_clusterings = Rcongas::get_clusters(fit) %>% select(cell, cluster) %>%
#   rename(clonealign = cluster) %>% as_tibble()
joint_clusters = intersection_congas_clonealign %>%
group_by(CONGAS, clonealign) %>%
summarise(n = n()) %>% mutate(CONGAS = paste(CONGAS))
require(ggalluvial)
require(pdfCluster)
clonalign_comparison_plot = ggplot(joint_clusters,
aes(y = n, axis1 = CONGAS, axis2 = clonealign)) +
geom_alluvium(aes(fill = CONGAS), width = 1 / 12) +
geom_stratum(width = 1 / 12,
fill = "black",
color = "grey") +
geom_label(stat = "stratum", aes(label = after_stat(stratum))) +
scale_x_discrete(limits = c("CONGAS", "clonealign"),
expand = c(.05, .05)) +
scale_fill_brewer(type = "qual", palette = "Set1") +
CNAqc:::my_ggplot_theme() +
guides(fill = guide_legend("cluster")) +
labs(title = "Comparison with clonealign", y = 'Cell',
caption = paste0('Adjusted Rand Index:', round(pdfCluster::adj.rand.index(intersection_congas_clonealign$CONGAS,
intersection_congas_clonealign$clonealign), digits = 2), "."))
# Strips
top_strip =  plot_grid(
CNA_wg_plot,
mixing_plot,
nrow = 1,
rel_widths = c(1, .3),
align = 'h',
labels = c("a", "b")
)
mid_strip =  plot_grid(
rna_plot_raw,
# counts_plot,
DE_full_plot,
nrow = 1,
rel_widths = c(.7, .3),
align = 'h',
axis = 'b',
labels = c("c", "d")
)
bottom_strip = plot_grid(
counts_plot$`chr15:67050001:102600000`,
counts_plot$`chr16:1:3750000`,
counts_plot$`chr18:32400001:55950000`,
clonalign_comparison_plot,
axis = 'b',
nrow = 1,
labels = c("e", "f", "g")
)
plot_grid(
top_strip,
mid_strip,
bottom_strip,
rel_heights = c(.8, 1, .8),
ncol = 1
) %>%
ggsave(filename = "breast_xeno_10x_Main_text.pdf",
width = 12,
height = 10)
plot_grid(
top_strip,
mid_strip,
bottom_strip,
rel_heights = c(.8, 1, .8),
ncol = 1
) %>%
ggsave(filename = "breast_xeno_10x_Main_text.png",
width = 12,
height = 10)
